<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mycomp.mybatis.mapper.ICustomerMapper">
    <!-- 根据cust_id查询客户 -->
    <select id="queryCustomerById"
            parameterType="Int"
            resultType="com.mycomp.mybatis.domain.Customer">
        SELECT * FROM `customer` WHERE cust_id  = #{cust_id}
	</select>

    <!-- 查询所有的用户 -->
    <select id="queryAllCustomer"
            resultType="com.mycomp.mybatis.domain.Customer">
        SELECT * FROM `customer`
	</select>

    <!--
        #{}和${}的区别:
        #{}: 表示一个占位符号(?)，通过#{}可以实现preparedStatement向占位符中设置值;
	         自动进行java类型和jdbc类型转换;
	         #{}可以有效防止sql注入;
	         #{}可以接收简单类型值或pojo属性值;
	         如果parameterType传输单个简单类型值,#{}括号中可以是value或其它名称;
	    ${}: 表示拼接sql串;
	         通过${}可以将parameterType 传入的内容拼接在sql中且不进行jdbc类型转换;
	         ${}可以接收简单类型值或pojo属性值;
	         如果parameterType传输单个简单类型值，${}括号中只能是value;
	         ${}不能防止sql注入;
     -->

    <!-- 根据名字模糊查询 -->
    <select id="queryCustomerByName"
            parameterType="String"
            resultType="com.mycomp.mybatis.domain.Customer">
        <!-- SELECT * FROM `customer` WHERE cust_name LIKE '%${value}%' -->
        SELECT * FROM `customer` WHERE cust_name LIKE #{name}
    </select>

    <!-- 添加一个客户 -->
    <insert id="insertCustomer"
            parameterType="com.mycomp.mybatis.domain.Customer">
        <!-- 获取插入的最后一个id -->
        <selectKey keyColumn="cust_id" keyProperty="cust_id"
                   resultType="Integer" order="AFTER">
            SELECT last_insert_id()
        </selectKey>

        INSERT INTO `customer`(cust_name, cust_profession, cust_phone, email)
        VALUES (#{cust_name}, #{cust_profession}, #{cust_phone}, #{email})
    </insert>

    <!-- 更新一个客户信息 -->
    <update id="updateCustomer"
            parameterType="com.mycomp.mybatis.domain.Customer">
        UPDATE `customer` SET cust_name = #{cust_name} WHERE cust_id = #{cust_id}
    </update>

    <!-- 删除一个客户 -->
    <delete id="deleteCustomer"
            parameterType="com.mycomp.mybatis.domain.Customer">
        DELETE FROM `customer` WHERE cust_id = #{cust_id}
    </delete>

</mapper>